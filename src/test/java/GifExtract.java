
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import org.apache.commons.io.IOUtils;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.TrustStrategy;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContextBuilder;
import javax.net.ssl.SSLContext;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.imageio.ImageReader;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import com.badlogic.gdx.tools.texturepacker.TexturePacker;
import jakarta.xml.bind.DatatypeConverter;
import java.awt.Color;
import java.awt.image.DataBuffer;
import java.util.HashMap;
import org.testng.annotations.Test;

public class GifExtract {

    //@Test
    public void extractGifsFromHtml() throws Exception {

        List<String> lines = IOUtils.readLines(new FileInputStream("C:\\Users\\panti\\OneDrive\\Desktop\\gifs.html"));

        TrustStrategy trustStrategy = new TrustStrategy() {
            @Override
            public boolean isTrusted(X509Certificate[] xcs, String string) throws java.security.cert.CertificateException {
                return true;
            }

        };

        SSLContext sslContext = SSLContextBuilder.create().loadTrustMaterial(null, trustStrategy).build();
        SSLConnectionSocketFactory sslSocketFactory = new SSLConnectionSocketFactory(sslContext);
        CloseableHttpClient client = HttpClients.custom().setSSLSocketFactory(sslSocketFactory).build();

        for (String line : lines) {
            if (line.contains("data-image-name=\"")) {
                String[] tokens = line.split("\"");
                for (int i = 0; i < tokens.length; i++) {
                    if (tokens[i].startsWith("https")) {

                        String url = tokens[i].replace("amp;", "");
                        System.out.printf("%s\n", url);

                        String[] names = url.split("/");

                        try (CloseableHttpResponse response = client.execute(new HttpGet(url))) {
                            HttpEntity entity = response.getEntity();
                            if (entity != null) {
                                File myFile = new File("src/main/resources/assets/gifs/creatures/" + names[7]);
                                try (FileOutputStream outstream = new FileOutputStream(myFile)) {
                                    entity.writeTo(outstream);
                                }
                            }
                        }
                    }
                }

            }
        }
    }

    //@Test
    public void extractGifsFromHtmlNPCs() throws Exception {

        List<String> lines = IOUtils.readLines(new FileInputStream("C:\\Users\\panti\\OneDrive\\Desktop\\gifs.html"));

        TrustStrategy trustStrategy = new TrustStrategy() {
            @Override
            public boolean isTrusted(X509Certificate[] xcs, String string) throws java.security.cert.CertificateException {
                return true;
            }

        };

        SSLContext sslContext = SSLContextBuilder.create().loadTrustMaterial(null, trustStrategy).build();
        SSLConnectionSocketFactory sslSocketFactory = new SSLConnectionSocketFactory(sslContext);
        CloseableHttpClient client = HttpClients.custom().setSSLSocketFactory(sslSocketFactory).build();

        for (String line : lines) {
            if (line.contains("Addon_3.gif")) {
                String[] tokens = line.split("\"");

                String name = tokens[7].replace("Outfit", "Sorcerer").replace(" Addon 3", "");
                String url = "https://www.tibiawiki.com.br" + tokens[9];

                try (CloseableHttpResponse response = client.execute(new HttpGet(url))) {
                    HttpEntity entity = response.getEntity();
                    if (entity != null) {
                        File myFile = new File("src/main/resources/assets/tibian/characters/" + name);
                        try (FileOutputStream outstream = new FileOutputStream(myFile)) {
                            entity.writeTo(outstream);
                        }
                    }
                }

            }
        }
    }

    //@Test
    public void makeAtlases() throws Exception {
        //readGifs("creatures", "arachnids", "bears", "creatures", "fighters", "outlaws", "sorcerers");
        readPngs("bards-tale");
    }

    //@Test
    public void wiz4Images() throws Exception {

        String[] images = new String[]{
            "000000000000000000000000A0A0A080D094A5A9A18189A98AAAA19585819194000081818591859400000000000000000000000000004000A000082208220822C9D194C4D0D001C0938AA8A2888A8280918140104014082A00406072786C361B40104000A8A8AAAA0822082208A18585010001000100000040505014141414644A6A305C6C773B1D1D0E171311141414AAAAAAAAA8A8A08081849595959585A500000061450515456434787C7B361C780E070329282A2A2814151515050501008000000000000000202A2840104010005151545414040044620202082008220801104411441144110000000000020002",
            "00000000000000000000002000200820501441A0A8A2828A020A208185848485000000000100010000000000000000000000607078787C7C0823070F1F3F777F8A5105A114504414A52208A10A4A4842797C7C7E767D5D7900030F1F1F3F1F0F7E78441C7C3C7003773F0F303F3B0F305042069E3E3E3C386270787E9F87E3F363070360380F0100031C1F3FBDF5F5E57E783070707078007F7F7F3F0E637C6E30F1646E1F3F8FA7E74E1E1EB0E591C100010303060E0C19858585858585858500004000401040103862082208220822A3A9A8A001041144E1B1994C470020083030E34F1F3E78618585857F00000001",
            "0000000000003E7B406070783C1E0F0607030140404040587C7E07FBC1D0C4D43F7F605F038BA3AB000001030706060660470F1E581C7F7B01030707033078735E5F3F6F7F763C07D18727282022260F8B804510044165610607030C1F3F3E3F7F6C3C3858000000411E7F7F7D7E5E701F5E5C43674741003F7FBFDFDFDFDFDF183FAAAAAA8880803B1E859595919090000000000000000060000000000000000000000000C090C4DEDEDCD8C2C8C2888CFCACF8F0A082AA93939391909094A50000000000000000000000000000000091C4997E78463F7FA288A288A70F0E0DA881C491C4E1787C89A088A288A30F1F",
            "0000000000000000C0C080000000000080828A8000005054808081D081810A2A808080828A880000000000000000000000000000000000000020006070787C3C5555007F3F1FADAA2A2A007F7F7F7C95010500071F3F3F7F000000000000000000407C3C3E677F7FCECFCFCFCFCF1F3FAAA084828A8A8AAAD5C1C9D1C5D5D1D57E5C9CBCFCFCD8F801030303070707077E7E7B70041464647F777E7C7E6F6F6388A8A9A189A9A9A8D1D495850095959578787870707044450301030B2B2F2D2B643474545014545438020A082A222A2AA005511450015555852028200800282815044110545155552B222A2A0A282A2A",
            "000083868C98B0E098989898989898980000C0E0B0988C8600838100000000000000000000405054000000280A0A0A0AC00000009F0000A0998000909491BCE6830000C0C0C28282707C7F292A0094D5400F7F7F7555D0C20A0A08030F1F3E7AA0A0C00060004000E7BEC1D494C0D1D082838086808C8080D1C092909191C1D5CAC084A0AAAAAAAAE8A1AF8CBAFEEFEC8000404040404040D3D29690062A26228C808C800D110D51B991C4D490005114AA8A8280888AA22898BCB8308088292840404040400000002C221A0A4800200A4D5156400104105052420A2A2A2A28200A425055555555552A2A2A0A2A22080A",
            "000000008080C0E000C0D0D4D4D5D5D5808AAAAAAAAAAAA800008081849DBDBD000020282A02322A0000010515101315607038381C1C1C3CC19591998591D5D582AAA2B2A288AAA8FCF9F8F9F8F1FDD90A08303202322929140403131013050538B8180C3C3C765E9494D0D4C594D0C0A0AAA88AA2A8AA8AF9B0F0E088C9680A032726272727272700010101010101014E40545410400414020A282A2A222A0040404444444444042A6A686A727A3A1026262727272024250101050D0D1D1D0D4414544454544454002A2A222A28222A0444444444444444202A222A2A0A2A2A25242524252524250D19010101010101",
            "104410441044A8AA000002000208818500000000000000000000000000000000000000000000000000000000000000001CBAAAAAAAAAA9A48E878584A584A481000000000001049100000000000000000000000000000000000000000063666C1144110481A0A8AA220822C88595D5D554A9AAAAA88082AA80808185D5D5D4D0000000008082828A78F003E3EEFCF086A81E4E3E7E3E407ED596713E1F003F7FAAAAA8A0A000003CC59595C58190C166A8C280F0DA4C5970838DE76CB90101007E7E7E7E164000407F7F2F0B220822086D6D6D6C3C0100053636660606000000664F0D0C070000000001000000000000",
            "00004078BCBCBCB80094D5D5D5D195D10000808282888A880000187040707C7038387E3B7F7F6E3B0000311F071D7F1FB8A8A8A0A08484949F9D95D595C594D09F8E8A8A8A82D2D240406000000000823B7F7E0030AAAA3007070D0080818585D0C08494D4C4707CC0828AA800FFB6F7D09484C1D4D1C71F80A8AAAA8AA2A8AAAAAAA9A8A9A184B4858485848581888A6E7E7E7E7EAE7E7EF7F7B6D5DDD5DDD53B3F3F3F3F9A3F3FA085919195959595B5B5B5B4B1B4B1B48A8A8882888280827E7E6E7C70C494D4B6F7F7F7B6FF80AA3F3F1BDFC791C4948581828280828282B1B4B0B0B0B000000000000000000000",
            "E000D0D4C5D595D58100828AA8AAAAAA00008080E0E0E0E0D0D4D7D7D595D0C58AEAEAEAEAE8EAAC0000038787858581C5D4D000E0E0E0A8A88A82000000A0AAA0909494D4D1C585D1DFDD95D494D2C2AFA6AAAAA88AC8C2A1A8A8AAAA8A8280AA8AA2A28AAAAAA8A98189A0A181818A81859480E5F5FCFC88A8A080FDF5F5F5D0959585C081C3D7A0A8AA82A88A828894E4E4E4E4E4E4E4A8A8A0A2A8A082A2CECFFF80AAFFAA80B5B5F584D5F5D584CEDE9F80CA9F8A80828080A280A088A0E0E0A0A88AA2A0E08AA6B5B495D5D1D4FFCECCF9F1E4D492F5B5B5F5F5F5B5809F8E8683C190C5D488A2A8A2AAAAAAAA",
            "00000000000000000000000000000000000000000000000080A090C09094C0D0D5D1C1CAD0C8CACA00808282828A888A0000000020282A20000000707939797920282F2F2F2F26000188A2AA8AAAA805D2D49585A5A1282AA8AAA204717574781E2C086C7E7B364C1D0100000143131100000020280A2208551514500411441122222A0A000A28227970600000000000300000000000404040606070783E7E7C2B272F1F1F0F0101445111414000000028221E3F3F7B7C7E010101000000000040101054545450407A022A28000A2A2A000000000000000100000000000000005E551540541454500202000000020A0A",
            "0000000000000000808088A8AA82D4D495D5D4D0D59584C20080828088A8AA8A00000000000000800000000000000000000080A0A0800000D081C1D0D1D4C7D0D4D2D2C094D084948A82A2A8AAAA8A8880818185849081C4000000000000000000000080C0C080809184A1A8A2C8C2D0C9C9A9A8AAAA8A8080A2AAAA89404040C18481280A220A220000010401040505808080A0A8AAAAA2908081C195C5D1D5A088C2888288C2608E7F614C361BCD862A28290B032B2928010004051555511588AAAAAAAAAA8AA291C49185D5C4C1C5B0DCEEB79B9F83890391948485818491082A2A2288A088A00505918491849194",
            "08200A202A22280A4150115151411041220A222802282A0A808080A0A0A0A0A080808595C581C4D100008080808280822A80020A220A2822808050541551444502800A282A2A2A2A8080A080D0D0C080D485C8AAAAA088808A8A8288A9A1A5A4020A2800220A022814405080804111410A2A0280282A2A2A9090C0D0D0C080C08080A0A2AA8A8AA2A0A18189A8AA8AA2222A2A0A2880020A1151514100804514282008220A80020AD0C0B080F0D09080AAAA8ACAC294C4D588A81212880A10C42A2A2A2A2A08802A40115511540000512228282A0A00002A208020A0A00000409185850580A0A8A294C4958591859194",
            "0000000000004058000000000001010D80C0D0D0D09494A5AAAAA21E1E8095D50181818585849494000000800000000070707830004000400343470300002028A5A5A5A5A5A4A401D5C4D1D1D1D1D59194B4B494948484F800000000020A0A22004000100A0A0C0C2008282820082000313179697979387995C4E1733F1B5F4F1E27292A222A2A2A28251415051717171838706060C0A0A00820282A2185959678397871616140404F4F4F4D4F4E5F1B287A7A2A282A2A2A171F1F1717171717A0A0800000000000948DB5706000000000405050501414551E1C3800080A2A2A222A2820010554541515140500202A2A",
            "000000000000000000000000000040502808220A220A22621414545454545457000000000000000200000000000000000000000000000000501454145416171760626002A0A8AAA25757574085959585020A0A0A0A0A1A3A000000000000000000000000000040141614141410101F368AB2AAAAAAAAAA8A918C9494949594953A1A0A0A02024E4F000000000000020A54445410545444547C5872626A6A080AA8A1830E37002A2A94C5F0DEFB8055559B1F3E373F7C6E7E280A2A2A2228282950545454445450540A0A080A020A0A022A2A2A2A2A2A2A2AD5D50055D5D50555DAF2CAAAAAAAAAAA2129292B81858585",
            "78785E4616465E7807071E181A181E074040505050505414AA08A2383A3800D081818585859490D000000000000000007878006060606060070700010101018114161616140400B0D4D591C5C5C5D5C4D0D2D2D2D2D2C098000001010100000060606000A0A8A8A881A1A9A081852085BDBEECF9E4012525C4D490036E3A0001B0786C7B1DC300088289A9A88A20282AA8A8A000606060600085812029292121252524242525252505454545454545450A0A0A0A0A0A0A08282A282A282A282060606060606060600101010101010101011010141454545405040094D0C0022A8288A8AA8A824015222A2828080A0200",
            "00000000000000000000000000000000000000000000000000000000404040407F7F3F1F3F7377777F7D70777E72404CD0C49084C4E0E0808082D4FDFF87D4C5808080828B8F9E8840606060606000E077070F3F1F3F78016063717F7C737B7FA0A0A0A0808080009995959585D584D48B8A8A8A8A828282E08090D0D4D4D4C40100808080828A8A60000000000000006066470703072F07D001D3D77C00440018B09C0E2300080008676E6C6C6C6960AAA8A8A0A8A088A000008181818585851B3F3F3F03A9AAAA11004480108081D52200088002A0A8AAE080D495C595C59580A28080808080808584818480800000",
            "000000000000000000000000202028281054555B6B6B6B550000020A0A2A2A2A00000000000001050000000000000000000000000000000002C0D0CECE8ECECE00AAAA88C9A2A2A20080F9F9F9F8F9F90504010707070707000000000000000000000003070E1C38CECECECE06262848A2AAA282AAA800A9F9F9F9F9F9F8B98107070707070700140000000000000000706060404000404068624B0B6F6E7E7AAB47476E00036F6F9E1F2F2320260F2F0525252525212425000105051515003F40404000404000407A706A42C290C292030029032F0E1C1C2E0CA0A1A4A1A4002525242125212425332B3D273B3F0015",
            "0000000080828AAA00000000000000D5000000000000A8AA000000C0D4D595D5A0A8AAAAAAA28A888181818000000000A8A8A08000000000D591D59500404050AAA28AA22A0A222AC491C555145555008282020A0A28222800000000000000010000000000000000507C7C7004545454022288A88888A8A855551480D59093D64260E0CA80888B890307010405050505000040505014445054504A02280A2228A8A8A8A8A8A9A9A091D591C581FC80FD8A8A8A8A8A88C8C20505050525202F2F144450148088A8A00A02D0C4D591D5C480828288AAA2AA8881D4002AA184D5918210140505808082272B282A28000000",
            "00000000000000000020082008220822114401A0A8AA828A0200020881858180008080808080808000000000000000E0000000004010471F0822082208220822AAAAAACA88A8A104848485858481A1F88080808080C0E1F7F0B89C8E878301006F1B47604E1F3B3F08261D7F6FFFFE7C51041100777F6E3FF0E0878E98636948B99C8E870303071C00000000000000007F6F7F7F6F7F7F5F787878B8B88801613F0F415054555043282A2A00024A4A4A710501000041416100000000000103837E1C037F6F3F3B1F707CFCFDDCFEBE1F4F1F0D4773597C004A4AE07F3F3D1F006171707060445000838387870B080A0A",
            "000000000000000000000000607030300000000007C1C0C0A0A8A88A8A8282C00040B0989C9687C10061B0B8AC8E8B810000004040400000306003010101A3A6D090948485C1C180E0A8AC8A8A8B47E7E1B0D89C9687C5C006ACAC18BABAB2B20000000040000000A0082A2A20000208D0D0900105155450AEB0AC8682808002D1D0D095970FFDF1B030381C00000100000000808080808000D0D494D4D5D5D5401C46111404A8AA0A2A282000858581808001010504040100000000000000000082AAAAAAAAAAAAD5D1D4D1D4D1D4D18AA2A2AAAA82A2AA808585818085858100000000000000000000000000000000",
            "7E7E7E7E7EAAAAAAF5F5F5F5F5D5D5D51F1F1F8A8A8A1E1E00808080A080A080C491C491C491C48100828082888288807E7E7E7E70CC8C8CF5F5F5F5F5B500801F1F0F0F01000060A088A088A288A089A8A882A2AAAAAA8881858580848481808884918491849184C06088A288A288A25FD8D9B4B1746164A3830F3F7E7C7A76A8A18480015F5F6F81819C1C5E6F773B818C8C8C8C8C8C8C8880607030303030414060706E6F6F4F0D7B077F7F7F7F7F0037F8AFAFAFAAAF5C6F606F6F6FED6F8C8C8C8C8C8C8C8C3038181C4C6E667E5B5F5B5B1B1B7B7D7F7F7F7F7F7F7E7DAFAFAFFFCF93C3936F6F6F6BE0E2E0E2",
            "000000000000000000000000707C7E7F000000000F3F7FFF00D0D4D4D49494D100008082EACACAC8000000000101030300404040C4C4D5840FD3D5818595D193F0EAC0C8CAF2787E0383070767776763E27FFCF0636F4F1F070F0F1F1F1F3F3F84207070307071637E7C71071E7E79797F7F7F3E0000030F73F9797C7C7E7E7F3F7FFFFFFD7102133F3E3D7CFEFF7F3C776F7F7F7F7F7E1C63470F07030100003F7F7E797E7C700C7F7F7E71637B3F0619191C2E6F63383C00000000010307000000000000000040000040707C7E7F7F2378670F1F3F7F7F00717F3F407E07011B41F8FFFB787C70870F1F9F3F7F7F7F",
            "0000808080808080000080808080800080808080000000008080000000000000000000C070B8AC860000000F1DB9B0B7800080A0A0A0A08000008595D1D1D4008000007C7C7C7C7C0000787E7D7B3F5FE66C716F0F0F070737373B1B0C7078F5800000000000075F000000000060787F800000007C7F7F5F5E60606E6E5D3F7FA7A7A763737D7F7EE5E5E5E4790703003F7F7F3F070300007F675FC0C0C0C0C03F7F3FC2AAAAAAF27F700F7DFDFDFD7C03607F5C733F7F7F00010101010100010000000000000000C0C0C00000000000E2828282820000007F000000000000007F7E0000000000000101000000000000",
            "00000000000000000080A0A8A8A88A8AD0D5D581D0D484C5AAAAAA0228000A2095D5D5D5D0C0C500008080828AAAAAAA8080C0C0C0D0D0908AAA8A828080C090918510C080808AA00220288280C0D0D510440180A8AAAA80A8A8A8A8A0A1A5A594909494909490D0D09494D4D4D0D0C08288A084A08AA2AA95909091D0D1D1C1A8829082A8828AAAA4A4A4A5A5A5A5A1D0D0C0C000000000C08282A2828A8A88AAAA00000084C1D00000A0A8AAA8A822AAA880D5D5D5D5D5A1A0A2AAA2A2AAA20000000000000000A8A0A0800000000084C09191C5D4D0C0AAA0A822A222AAAAC5D5D59595C545C1A888888AA2A2A8AA",
            "0000A0A0A888A8A800859595959595C500A8AA82AAAAA28A0095D5D5D4D1D5C580A0A8A888A8A8A20081858595959195A8A8A888A88888A0C4C5D19190D48581AAAAAAA8A28AA82090D595C5C5D19585A2A288888AAAA0809594959594919185A0A0A0A0A000000081A0A081C1D591C0010420AA8AA08280002085D5D085C1C101048480828A88828484848585858180000000808888888AC4C5D595D5D5D5D18AA2AAAA806CECD890D4C4D480B6361AA2A2A8AAAAAA8AAA80818181819191D18A888AAAA2AAA8AAD595D4D0808184D582AA8A8280A0A88AC0D4D0818185D5D0AAA8AA8A8080A0AAC1D1D0D49495D4D5",
            "00000000000000000080C0C4C4C5959500808AA8A2A8AAA200008080808484940000000000000000000000000000000080A0A0A8AA8AA8ACD1C982C0D5D1D5C48882AAA288A28AA89595D5D5D5D495D400000080808082880000000000808090B0B088A8A0000000D59BE6D5D580C0C08BAA8AA28AA2AAAA95C495D595C5D5D1A288A288A288A2AAC491C4D1C4D1D5D50000000000000000C0C0C0C0C0C0C0C0A8A2A8A2A0A2A2A2D4D1C491C491C581AAAAAAAAAAA288A2D5D5D5C591C491840000000000000000C0C0C0D0D4949000A2A2A2A2A8AAAAA8858184818485818080800000808080808080000000000000",
            "00000000000000000000002008200A2250545505A9AAAAA000020822A985A5A000000000000101000000000000000000400000400040002008CAC8C802101451828A8AAA8A8AA8A0A1A585A5A5858110010105055475783A00003C7E63010004282A220802220A2A5445114544504000020A220808080A2A4411441111511505181A181A9938F8F811041514051411040A282A222A2A007E01000100010000012820808A8E8E8E8E01808080C0E070B8B89C0E2703210078151411140514001F1E4E767E7E7C6C6000230E766E1D3F6F8E550A7173676C191C6EF8D0D5D5D4D06306FDEAF28AAAAA3D332E1F01848100",
            "000000000000000000202028282A2A22051555114515555400000002020A0828000000000000000000000C6C6C3C3E7E4010441410008080002A00D08494D4D0045500AA82A0A8A8220A28208181818100000001713040607E3E1E18070E0D0700004000387C7E6ED0D0C0020209230BAAA0AA8A000040118181002008220862617471343958185D01000002000802087E7E7D04114411442309200000002000441144110440001170727878787000000D4E1E5E1E4E0343220822082208220811441180A8AAAAA802000200818595D50401040104000000404060607038381C1341104410A8A8AA2208220823959585",
            "00000000000000000000000000000000404050501444555502020A28A208220A000000000001808100000000000000000000000000000000002020202028282805A0A88A8AAAAAAA28008591D0D4D4D40105050404141414000000000000000000000000002040100040104C175C1072A8A8A0A0020822089594858581405075000008283A2E3B0E000000000104080A504050105000606042004A424A4841472E3B6E3A6E3B6E3A5C775D775D3715270B4E4A064242400522280A222A08223860606060606060400F1F1F1F1F0F777F6B3A2A0820080001054144412841404001030343554303633E3F3F3F3F3F3F3E",
            "0000000000000000000000000000000000000000004000400020280A220822D400000105041104920000000000000000000000000000401000202030386240020145054505401D4FC4849494D494D0829090929292929210000000000000000044104410441040004060082208220802030C1C3830646044220820A184D08001041104A1E8E2E060000002080B2F3F31000000000000000008000000000000004104A5A1A0888282030306860C18183060606060606060607370783B30151D0E0000000000000000000000000080808082828282A8E8E2C260604040D51D1D0860605551535555540707030300000001",
            "0000000000000000000080A0A0A0A0A0D0D4D58181A8AA8A0080828A8A8889890000000000000080000000000000000080808080A88A828AA0A0A0A5A0A8A880A8A2A2A2AABAAAA88889898989A9A9008000007C5FBEFEFF0000000003070D1FAAAAAAAAAA8A82404081F5E100280A12022A28238FF84105151545617C7F7F7F7C7B7103717371731F0F070C0F0D0F0D505400005454504044124A2A00002A7254145455500005537E7C7A726A40404A71737173717371010F0F0F0D0F6D7778828AAAAAAAAAAAAA4A28208181E1E1E13F7C65555400034F0A494B4A4AE07E7F78412363676767676F7F3E3C1D070F0F",
            "0000000020282A2A0000000001051515003018022A2A486804151555514099B9000306000A080A020000000000001455282A280A08282A2815111050514141054088A000020A2A2AD9C09585405015558020282A2208020015450541505454552820200822280A08051531210101014C28282000082A2A2A1555154510041555022020282820202055154505110401000A0820000000000048404023522010142A0A0202000000005450241414141448202028081810000004151414040501002028060120301000155555111018080800010000601000805454450100000000020A2202020C10000000010608000000",
            "00000000000000000000405050101050282A28220A2025200515455154012941000000020202020200000000000000000000000000002E2F505010400000115122280A0A0A082800514514541504054002020200000028220000000000001D3D2F2F2A2A2A2A00545151111111111052501455514555540252525252524210542222222222220A083D3D1515151515005C5454002A2A2A2A52525250514545110222220A0A2A2A2A555555415C3C3D01424A2B2A2A3A2A0A2A3A2A2A011114152A2A0A222828200014541515455555552A2828220202282815555555555450410820020A0A0A02001515150500000000",
            "FFF787A78793C3937F7F70E5C59494D27FFEFDFBF7EF9E8C7FDFEFF7FBFD9EDC7F7F8FA1A8AAAACA7FEFE0E5E16A6862C393C383A3A7878FC8C2082208A185A5ECACE2EAA16461A4DDDDD195A1092189CAD0441004A1A4A9686268F0F1F1F9F89FBFFFFFFFFF8F8794D4C001FF8300006164A0EEE3A0EC6F21C9C18DF181810DAAAA8080FFF08080FCFCFCFEFF7F7E788383A3A3A3A3A3A7605C765C765C80C1A66346036661F2F2F97158604D8D93930F6E3B6E3B0E83A070E0E4E4E4E5E5E5A78F9FFFBF9BC7FFD59584E0F8FE7F7FF0FCFFFFFF7F7F7FC3879FFF7F7F7F7FAAA8A0878F3F7F7FE1F178FCFFF6797F",
            "0414145454545444000000000002020A000003070F1E30A0000030383C1E0381000000404050101420282A2A2220242524242414142424240A28292525151415B0B0A0612565256583838121212929290425210929282A2A25212929212524252424240414104000151105242128020025652565256024642929292921010909222A28092105500025212929080A000000505414140424042802101411052525256525652541410129094909C90020200554400A2A222A080000020A0A2929292424242404545454212929080A020200010000000000000000000000000000002105145450504000292928282A2A2A2A",
            "000000000000000000002020202020005457017D6D4D5D1B0A3A202F2D2C2E3600000101010101000000000000000000000000000000000030787C5E7F5F7F5F72085952474E1F3E130446623078643E0103060D1E3C3F00000000000000000000000000000000007F5F7F5F7F077B786F665F767F4E4C414D77793D6D0D4D6D3F3F003F3F383337000E1B1B1B1B1B1B707000001818181829292803077F587F0D0D414C4E7F365320202D0D0D6E6F4705053530300F373B00001B1B1B1B1B1B18181818181818004F775B7C4F775B006E6F7677767776003B3D6D663E5A6E003B2C2C373C3B37001B1B1B1B1B1B1B00",
            "008080C0C0D0D4D400AAAAAAAAA88A8200D5D4D595D5000000AAA2AAAAAA001F0095D5C5D4D5D4D00080808082828A88C4D4D4D0D4D4C4D400000000000040601018181818181C033B7F706F6A6F6D0FC0C0C0C0C080C1C78A8A8A8A8A8A8A8AD494D4C4D4D4D0D470383038382838781F1B9F9B8FF706F07000D5D5D4D4D4D5CFDCDCCCDCDCDCD0828A8A8A888A8A82D4D494D4C4D4D4D030600000000000007B7B70000E0E1E5FD4D5D4D4D5D59401DCCC80C0C0C0C0C18A8A8A8A8A828A8AD494D4C4D4D4D40040404060606080005D4F66377A7B00006F2B5F5F3D3F0000C1C3C385C7C7C000888A8A8A8A828A00",
            "0000000000000000000000200020200000004111505161700A002A002A2A3079000010510151500000000000000000006030180C0000000020230C1A6A22222251515045011105152A202A200A0A0A0A51510150715C111460180603020202020000000000000000020A2A2A2A282000555450410515550000220A2A2A28200015054055555515050202020202000000000000000000000000000000000000000050541414444444000A2A0A020A080A0000050504050505000000000000000000000000000000000000002028282800441455454505550028282A0A08282A0005051451455055000000000002020200",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "222A0A20282A0200011004010180800480808081818185950080808080808080008181849194D0D0000000000000008000280822280A02280104010180800180D5D4D5D0C4D0C080808AAAAAAAA2828AC09000D5D5D5D4D0828A80AAAAAAAAA20802000020280A0A80040501212800048010040100551104AAA88080002A220085808080005544008AA08080002A0800020028082220080A0501000100000000D81898D8D8D8D8D8AA92999999999189D4D3C3B3B3B3B3B3A4E6E6E6E6E6E4E202202802000020000501101404010405D808546C2A001414AA2A2A5D55800A0AC251553B2A004545CA2A2A7755002222",
            "000000000000008000000000000000A0000000000000008100000000000000000000000000000000000000000000000080C0D4D5D5D595C4A8A2AAAA82808882C5D194C595D0C080AAAAA28880808AAAD5D5D591C48080918AAAAAA288A08080D18580800055110080808080002A22008080808000554400A0808080002A0800C594C0800055110088A28880002A2200D5C4C0CCCCCC8CCCA291999999999998A5B1B2B3B3B38393AAA686E6E6E6E6E689CCCCCCCCCCC0C4AA89819999999999D054556E2A005151920A2A5D55002828D455553B2A00141484222A7755000A0A1555556E2A004545A1282A5D55002222",
            "80000000000000DF0000800000000087000000000080808080800000A0A8AAA2008080008595959500000000808080A0EFFCF1E5C5D4D5D4FF7B3C79736F5D9BC3D4D4D0C38F5BDE80828AAAA8A288A2D5D4D0D0C0C18184A8828AAAAAAAAA8AD16439DC00554400B3713B7D002A08009F4EC780005511008A828080002A220091C4808000554400A8A08080002A0800C2B3B3B3B3B3B2B1CAE2E0E6E6E686A6D0CC8CCCCCCCCCCC9298999999998189D493A3B3B3B3B3C3A084C6E6E6E6E6E4A515553B2A005151A82A2A77550028288945556E2A001414AA2A2A5D55000A0AD251553B2A004545C20A2A7755002222",
            "00000000808095D500000000008082880000000020200081041004155041455028200000020A2A2A0001050410000005D491C48081C5D5D58082A088AAAAAAAA948184818491858500400105545450502A282A20280208001451051451410000D0C1D5008055110088A20000002A2200810000000015040001441450011550500A0A28202A28000A000401015550005495C5C0CCCCCC8CCCA9A1999999999998D190060606068284405410400000411428022A2A280208220500401501040105D055556E2A005151920A2A5D150028289505151922000404104105145044105408220A2A28220A280410000000010505",
            "10441044104410442288AAA022288A8844159484110555C468626862686268E210441044104410C42208020002000000104410445E0010C4A2880A085F00022891C540107C00441188E268627B000800100410406D000000008802205800000011C491C491C410C5222822282A082A0A4411C4010411040100200000082000200004100081841000000000080000000850401E000154115022083C002288A208000147000001400100001920000088A0009073009440001000006600288880801140104411C410442208A208220822088011400144114411000008A0002208228080808090C411C58088808080888288",
            "440100400094000028200000000000001343134013401043220822082208A2884491C415545144910822082288220822A0A100006D038003D1900000008485A1104403407B001044220822087D002208C49144116F303431082208006F000822000003000003400081840000002008201100164000000000220820080000000234313431C0B0940108220820800288A04310334551150481002270AAA22A200001416D03134313500000400002002208B080B500B411449180828880882880224400008100014411082000020820082210410450004313432208220822082208441144914491441188A2882288228822",
            "0D4C014C0D4C0D4822082208220822000411040140114010686268620862282210040004202020200000505544114411894800407F001144220020887E80A288441144117B904491080208021F000802282828282A2A282A451145515455555511441144100001802288A28822800000C4914491C4800010000200024042400022282A2A2A2A000A555555154511455400006618011C191C20006C002000028840017F150411049140124050545454542A0A0A02202A28220010045555555555011C191C191C091C22882288A28822888481840100212021551545114105041128220822082208205555514451441144",
            "0000020A2A282002000000000501144500000000000000008080808080808080D0D0D0D0D0D0D0D080808080808080800802080A22222222414141414000101100000000000000008080808080808080D0D0D0D0D0D0D0D08080808080808080080200200802080A111111111111110100000000000000008080808080800080D0D0D0D0D0D0D0D080808080808000800A000220020A2A2A110104000504141000000000000000208000000010141515D0D0C8AAAAAAAAEA80808080858580852A2A2A2A2228220801454151501155152A2A2A2A0A2A08221505110511041104EAAAAAAAA880D0D08580858580008000"
        };

        TexturePacker.Settings settings = new TexturePacker.Settings();
        settings.minWidth = 8;
        settings.minHeight = 8;
        settings.maxWidth = 256;
        settings.maxHeight = 4000;
        settings.paddingX = 0;
        settings.paddingY = 0;
        settings.fast = true;
        settings.pot = false;
        settings.grid = true;
        settings.edgePadding = false;
        settings.bleed = false;
        settings.debug = false;
        settings.alias = false;
        settings.useIndexes = true;

        TexturePacker tp = new TexturePacker(settings);

        int rows = 5;
        int cols = 6;
        int count = 0;
        for (String hex : images) {

            byte[] buffer = DatatypeConverter.parseHexBinary(hex);

            BufferedImage image = new BufferedImage(cols * 7, rows * 8, BufferedImage.TYPE_INT_RGB);
            DataBuffer db = image.getRaster().getDataBuffer();

            int element = 0;
            int rowSize = cols * 8;

            for (int row = 0; row < rows; row++) {
                for (int line = 0; line < 8; line++) {
                    for (int col = 0; col < cols; col++) {
                        byte b = buffer[row * rowSize + col * 8 + line];
                        for (int bit = 0; bit < 7; bit++) {

                            // Parse the pixel into RGB values
                            int red = (b >> 5) & 0x07;   // Extract the 3 most significant bits for red
                            int green = (b >> 2) & 0x07; // Extract the next 3 bits for green
                            int blue = b & 0x03;         // Extract the 2 least significant bits for blue

                            // Scale the values to the range 0-255
                            red = (red * 255) / 7;
                            green = (green * 255) / 7;
                            blue = (blue * 255) / 3;

                            if ((b & 1) == 1) {
                                db.setElem(element, new Color(red, green, blue, 1).getRGB());
                            }

                            b >>>= 1;
                            element++;
                        }
                    }
                }
            }

            tp.addImage(image, "" + count);

            count++;
        }

        tp.pack(new File("src/main/resources/assets/tibian"), "wiz4.atlas");
    }

    private static void readGifs(String atlasName, String... dirs) throws Exception {

        TexturePacker.Settings settings = new TexturePacker.Settings();
        settings.minWidth = 8;
        settings.minHeight = 8;
        settings.maxWidth = 2000;
        settings.maxHeight = 4000;
        settings.paddingX = 0;
        settings.paddingY = 0;
        settings.fast = true;
        settings.pot = false;
        settings.grid = true;
        settings.edgePadding = false;
        settings.bleed = false;
        settings.debug = false;
        settings.alias = false;
        settings.useIndexes = true;

        TexturePacker tp = new TexturePacker(settings);

        java.util.Map<String, BufferedImage> indexes = new HashMap<>();

        for (String d : dirs) {

            File directory = new File("src/main/resources/assets/gifs/" + d);
            File[] files = directory.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.isFile()) {
                        try {
                            List<BufferedImage> frames = readGif(new FileInputStream(file));
                            String name = file.getName().replace(".gif", "").replace("%27", "").replace("%28", "").replace("%29", "").replace(" ", "_");
                            System.out.printf("[%s] %s - frames [%d]\n", d, name, frames.size());
                            packFrames(tp, name, frames);
                            if (frames.get(0).getWidth() < 100) {
                                indexes.put(name, frames.get(0));
                            }
                        } catch (Exception e) {
                            System.out.println(file.getName());
                        }
                    }
                }
            }

        }

        tp.pack(new File("src/main/resources/assets/tibian"), atlasName + ".atlas");
        tileSet(indexes, "src/main/resources/assets/tibian/tibian-" + atlasName + ".png", 48);
    }

    private static void readPngs(String atlasName) throws Exception {

        TexturePacker.Settings settings = new TexturePacker.Settings();
        settings.minWidth = 8;
        settings.minHeight = 8;
        settings.maxWidth = 2000;
        settings.maxHeight = 4000;
        settings.paddingX = 0;
        settings.paddingY = 0;
        settings.fast = true;
        settings.pot = false;
        settings.grid = true;
        settings.edgePadding = false;
        settings.bleed = false;
        settings.debug = false;
        settings.alias = false;
        settings.useIndexes = true;

        TexturePacker tp = new TexturePacker(settings);

        java.util.Map<String, BufferedImage> indexes = new HashMap<>();

        File directory = new File("src/main/resources/assets/bt");
        File[] files = directory.listFiles();
        if (files != null) {
            for (File file : files) {
                if (file.isFile()) {
                    try {
                        List<BufferedImage> frames = readPNG(new FileInputStream(file));
                        String name = file.getName().replace(".png", "").replace("%27", "").replace("%28", "").replace("%29", "").replace(" ", "_");
                        System.out.printf("[%s] %s - frames [%d]\n", "bt", name, frames.size());
                        packFrames(tp, name, frames);
                        indexes.put(name, frames.get(0));
                    } catch (Exception e) {
                        System.out.println(file.getName());
                    }
                }
            }
        }

        tp.pack(new File("src/main/resources/assets/bt"), atlasName + ".atlas");
        tileSet(indexes, "src/main/resources/assets/bt/bt-" + atlasName + ".png", 146, 176);
    }

    private static void packFrames(TexturePacker tp, String name, List<BufferedImage> frames) {
        for (int i = 0; i < frames.size(); i++) {
            BufferedImage f = frames.get(i);
            if (f.getWidth() < 1 || f.getHeight() < 1) {
                System.out.println("Skipping empty file " + name);
                continue;
            }
            if (f.getWidth() > 200 || f.getHeight() > 200) {
                System.out.println("Skipping large file " + name);
                continue;
            }
            tp.addImage(f, name + "_" + i); //the atlas index is derived
        }
    }

    private static void tileSet(java.util.Map<String, BufferedImage> map, String outfile, int dim) throws IOException {

        int height = (map.size() * 48) / 20 + 48;

        BufferedImage output = new BufferedImage(960, height, BufferedImage.TYPE_INT_ARGB);

        int x = 0;
        int y = 0;
        int count = 0;

        for (String k : map.keySet()) {
            BufferedImage tile = map.get(k);
            output.getGraphics().drawImage(tile, x, y, dim, dim, null);

            x += dim;
            count++;
            if (count >= 20) {
                count = 0;
                x = 0;
                y += dim;
            }

            System.out.printf("%s,\n", k);
        }

        ImageIO.write(output, "PNG", new File(outfile));

        System.out.println("----");

    }

    private static void tileSet(java.util.Map<String, BufferedImage> map, String outfile, int w, int h) throws IOException {

        int dim = 10;
        int height = (map.size() * h) / dim + h;

        BufferedImage output = new BufferedImage(w * dim, height, BufferedImage.TYPE_INT_ARGB);

        int x = 0;
        int y = 0;
        int count = 0;

        for (String k : map.keySet()) {
            BufferedImage tile = map.get(k);
            output.getGraphics().drawImage(tile, x, y, w, h, null);

            x += w;
            count++;
            if (count >= dim) {
                count = 0;
                x = 0;
                y += h;
            }

            System.out.printf("%s,\n", k);
        }

        ImageIO.write(output, "PNG", new File(outfile));

        System.out.println("----");

    }

    private static List<BufferedImage> readGif(InputStream is) throws IOException {
        return readImage(is, "gif");
    }

    private static List<BufferedImage> readPNG(InputStream is) throws IOException {
        return readImage(is, "png");
    }

    private static List<BufferedImage> readImage(InputStream is, String format) throws IOException {
        List<BufferedImage> frames = new ArrayList<>();

        ImageReader reader = (ImageReader) ImageIO.getImageReadersByFormatName(format).next();
        reader.setInput(ImageIO.createImageInputStream(is));

        int numFrames = reader.getNumImages(true);
        for (int i = 0; i < numFrames; i++) {
            BufferedImage frame = reader.read(i);
            frames.add(frame);
        }
        return frames;
    }

}
